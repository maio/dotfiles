(require 'magit)
(require 'key-chord)
(key-chord-mode 1)
(key-chord-define-global (kbd ",,") 'other-buffer-or-window)
(key-chord-define-global (kbd ";w") 'force-save-buffer)
(key-chord-define-global (kbd ";b") 'maio/helm-mini)
(key-chord-define-global (kbd ";k") 'kill-current-buffer)
(key-chord-define-global (kbd ";t") 'helm-c-etags-select)
(key-chord-define-global (kbd ";r") 'helm-resume)
(key-chord-define-global (kbd ";x") 'helm-M-x)
(key-chord-define-global (kbd ";s") 'helm-occur)
(key-chord-define-global (kbd ";v") 'find-config-file)
(key-chord-define-global (kbd ";e") 'my-eval-defun)
(key-chord-define-global (kbd ";n") 'maio-narrow-to-defun-clone)
(key-chord-define-global (kbd ";a") 'helm-git-grep)
(key-chord-define-global (kbd ";1") 'delete-other-windows)
(key-chord-define-global (kbd ";g") 'magit-status)
(key-chord-define-global (kbd "GG") 'guard-or-goto-guard)
(key-chord-define-global (kbd ";q") 'delete-window)

(evil-define-key 'normal clojure-mode-map (kbd "RET") 'midje-check-fact)
(define-key magit-status-mode-map (kbd "p") 'maio-git-submit)
(key-chord-define magit-log-edit-mode-map (kbd ";a") 'magit-log-edit-toggle-amending)

(evil-define-command cofi/evil-maybe-exit ()
  :repeat change
  (interactive)
  (let ((modified (buffer-modified-p))
        (entry-key ?j)
        (exit-key ?k))
    (insert entry-key)
    (let ((evt (read-event (format "Insert %c to exit insert state" exit-key) nil 0.5)))
      (cond
       ((null evt) (message ""))
       ((and (integerp evt) (char-equal evt exit-key))
          (delete-char -1)
          (set-buffer-modified-p modified)
          (push 'escape unread-command-events))
       (t (push evt unread-command-events))))))

(define-key evil-insert-state-map (kbd "j") 'cofi/evil-maybe-exit)

(defun maio/electric-semicolon ()
  (interactive)
  (call-interactively 'end-of-line)
  (when (not (looking-back ";"))
    (insert ";")
    (indent-according-to-mode)))

(defun maio/electric-space ()
  (interactive)
  (cond ((looking-back "(\\|{")
         (insert "  ")
         (backward-char))
        (t (insert " "))))

(defun maio/electric-return ()
  (interactive)
  (cond ((looking-back "(\\|{")
         (newline-and-indent)
         (call-interactively 'evil-open-above))
        (t (newline-and-indent))))

(defun maio/makefile-newline ()
  (interactive)
  (insert "\\")
  (newline-and-indent))

(eval-after-load 'make-mode
  '(define-key makefile-gmake-mode-map (kbd "C-j") 'maio/makefile-newline))

(provide 'maio-keys)
